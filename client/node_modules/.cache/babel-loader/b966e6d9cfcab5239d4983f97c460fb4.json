{"ast":null,"code":"var _jsxFileName = \"/Users/changhyunshin/Documents/React_Ecom/my-react-app/client/src/components/Commentbox.js\";\nimport React from \"react\";\nimport axios from \"axios\"; // const CommentBox = () => {\n//           return (\n//             <div className=\"commentBox\">\n//               Hello, world! I am a CommentBox.\n//             </div>\n//           );\n//         };\n\nclass CommentBox extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      showComments: false,\n      contacts: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"/api/contacts\").then(res => {\n      this.setState({\n        contacts: res.data\n      }, () => console.log(this.state.contacts));\n      console.log(this.state.contacts);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    const contacts = this._getComments();\n\n    let commentNodes;\n    let buttonText = 'Show Comments';\n\n    if (this.state.showComments) {\n      buttonText = 'Hide Comments';\n      commentNodes = React.createElement(\"div\", {\n        className: \"comment-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, contacts);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"comment-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Join the Discussion!\"), React.createElement(CommentForm, {\n      addComment: this._addComment.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"comment-reveal\",\n      onClick: this._handleClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, buttonText), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Comments\"), React.createElement(\"h4\", {\n      className: \"comment-count\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, this._getCommentsTitle(contacts.length)), commentNodes);\n  } // end render\n\n\n  _addComment(author, body) {\n    const contacts = {\n      id: this.state.comments.length + 1,\n      author,\n      body\n    };\n    this.setState({\n      comments: this.state.contacts.concat([contacts])\n    }); // *new array references help React stay fast, so concat works better than push here.\n  }\n\n  _handleClick() {\n    this.setState({\n      showComments: !this.state.showComments\n    });\n  }\n\n  _getComments() {\n    return this.state.contacts.map(contacts => {\n      return React.createElement(Comment, {\n        user_name: contacts.user_name,\n        body: contacts.body,\n        key: contacts.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      });\n    });\n  }\n\n  _getCommentsTitle(commentCount) {\n    if (commentCount === 0) {\n      return 'No comments yet';\n    } else if (commentCount === 1) {\n      return \"1 comment\";\n    } else {\n      return \"\".concat(commentCount, \" comments\");\n    }\n  }\n\n} // end CommentBox component\n\n\nclass CommentForm extends React.Component {\n  render() {\n    return React.createElement(\"form\", {\n      className: \"comment-form\",\n      onSubmit: this._handleSubmit.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"comment-form-fields\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"Name\",\n      required: true,\n      ref: input => this._author = input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      placeholder: \"Comment\",\n      rows: \"4\",\n      required: true,\n      ref: textarea => this._body = textarea,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"comment-form-actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Post Comment\")));\n  } // end render\n\n\n  _handleSubmit(event) {\n    event.preventDefault(); // prevents page from reloading on submit\n\n    let author = this._author;\n    let body = this._body;\n    this.props.addComment(author.value, body.value);\n  }\n\n} // end CommentForm component\n\n\nclass Comment extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"comment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"comment-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.props.author), React.createElement(\"p\", {\n      className: \"comment-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"- \", this.props.body), React.createElement(\"div\", {\n      className: \"comment-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      className: \"comment-footer-delete\",\n      onClick: this._deleteComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Delete Comment\")));\n  }\n\n}\n\nexport default CommentBox;","map":{"version":3,"sources":["/Users/changhyunshin/Documents/React_Ecom/my-react-app/client/src/components/Commentbox.js"],"names":["React","axios","CommentBox","Component","constructor","state","showComments","contacts","componentDidMount","get","then","res","setState","data","console","log","catch","err","render","_getComments","commentNodes","buttonText","_addComment","bind","_handleClick","_getCommentsTitle","length","author","body","id","comments","concat","map","user_name","commentCount","CommentForm","_handleSubmit","input","_author","textarea","_body","event","preventDefault","props","addComment","value","Comment","_deleteComment"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\n// const CommentBox = () => {\n//           return (\n//             <div className=\"commentBox\">\n//               Hello, world! I am a CommentBox.\n//             </div>\n//           );\n//         };\n        \nclass CommentBox extends React.Component {\n    constructor() {\n      super();\n    }\n    \n    state = {\n        showComments: false,\n        contacts: []\n      };\n  \n    componentDidMount() {\n      axios\n        .get(\"/api/contacts\")\n        .then(res => {\n          this.setState({ contacts: res.data }, () =>\n            console.log(this.state.contacts)\n          );\n          console.log(this.state.contacts);\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    }\n    \n    render () {\n      const contacts = this._getComments();\n      let commentNodes;\n      let buttonText = 'Show Comments';\n      \n      if (this.state.showComments) {\n        buttonText = 'Hide Comments';\n        commentNodes = <div className=\"comment-list\">{contacts}</div>;\n      }\n      \n      return(\n        <div className=\"comment-box\">\n          <h2>Join the Discussion!</h2>\n          <CommentForm addComment={this._addComment.bind(this)}/>\n          <button id=\"comment-reveal\" onClick={this._handleClick.bind(this)}>\n            {buttonText}\n          </button>\n          <h3>Comments</h3>\n          <h4 className=\"comment-count\">\n            {this._getCommentsTitle(contacts.length)}\n          </h4>\n          {commentNodes}\n        </div>  \n      );\n    } // end render\n    \n    _addComment(author, body) {\n      const contacts = {\n        id: this.state.comments.length + 1,\n        author,\n        body\n      };\n      this.setState({ comments: this.state.contacts.concat([contacts]) }); // *new array references help React stay fast, so concat works better than push here.\n    }\n    \n    _handleClick() {\n      this.setState({\n        showComments: !this.state.showComments\n      });\n    }\n    \n    _getComments() {    \n      return this.state.contacts.map((contacts) => { \n        return (\n          <Comment \n            user_name={contacts.user_name} \n            body={contacts.body} \n            key={contacts.id} />\n        ); \n      });\n    }\n    \n    _getCommentsTitle(commentCount) {\n      if (commentCount === 0) {\n        return 'No comments yet';\n      } else if (commentCount === 1) {\n        return \"1 comment\";\n      } else {\n        return `${commentCount} comments`;\n      }\n    }\n  } // end CommentBox component\n  \n  class CommentForm extends React.Component {\n    render() {\n      return (\n        <form className=\"comment-form\" onSubmit={this._handleSubmit.bind(this)}>\n          <div className=\"comment-form-fields\">\n            <input placeholder=\"Name\" required ref={(input) => this._author = input}></input><br />\n            <textarea placeholder=\"Comment\" rows=\"4\" required ref={(textarea) => this._body = textarea}></textarea>\n          </div>\n          <div className=\"comment-form-actions\">\n            <button type=\"submit\">Post Comment</button>\n          </div>\n        </form>\n      );\n    } // end render\n    \n    _handleSubmit(event) { \n      event.preventDefault();   // prevents page from reloading on submit\n      let author = this._author;\n      let body = this._body;\n      this.props.addComment(author.value, body.value);\n    }\n  } // end CommentForm component\n  \n  class Comment extends React.Component {\n    render () {\n      return(\n        <div className=\"comment\">\n          <p className=\"comment-header\">{this.props.author}</p>\n          <p className=\"comment-body\">- {this.props.body}</p>\n          <div className=\"comment-footer\">\n            <a href=\"#\" className=\"comment-footer-delete\" onClick={this._deleteComment}>Delete Comment</a>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  \n  \n\nexport default CommentBox;"]},"metadata":{},"sourceType":"module"}